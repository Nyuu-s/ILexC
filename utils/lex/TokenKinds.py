from enum import Enum

class Token_kind(Enum):
    ### RAW C ###
    TOKEN_END = "end"
    TOKEN_PREPROC = "preprocessor directive"
    TOKEN_SYMBOL = "Symbol"
    TOKEN_POINTER = "raw pointer"
    TOKEN_OPEN_PAR = "open parenthesis"
    TOKEN_CLOSE_PAR = "close parenthesis"
    TOKEN_OPEN_CURLY = "open curly brace"
    TOKEN_CLOSE_CURLY = "close curly brace"
    TOKEN_SEMICOLON = "semicolon"
    TOKEN_FOR = "for loop"
    TOKEN_WHILE = "while loop"
    TOKEN_IF = "if statement"
    TOKEN_GT = "Greater than"
    TOKEN_LT = "Less than"
    TOKEN_GE = "Greater or equal"
    TOKEN_LE = "Less or equal"
    TOKEN_EQ = "Equal"
    TOKEN_NOT = "Not operator"
    TOKEN_DO = "do operator"
    TOKEN_ASSIGN ="Assign operator"
    TOKEN_DOT = "dot operator"
    TOKEN_ARROW = "Arrow operator"
    TOKEN_COMMENT = "Comment"
    TOKEN_MINUS = "Minus"
    TOKEN_PLUS = "Plus"
    TOKEN_NUMBER = "Number"
    TOKEN_STRING = "String"


    ### IBM RELATED ###
    TOKEN_C_ERROR_HANDLING_ASSERT = "Prints diagnostic messages."
    TOKEN_C_ERROR_HANDLING_ATEXIT = "Registers a function to be"
    TOKEN_C_ERROR_HANDLING_CLEARERR = "Resets error indicators."
    TOKEN_C_ERROR_HANDLING_FEOF = "Tests end-of-file indicator for"
    TOKEN_C_ERROR_HANDLING_FERROR = "Tests the error indicator for a"
    TOKEN_C_ERROR_HANDLING_GETEXCDATA = "Retrieves information about an exception from with..."
    TOKEN_C_ERROR_HANDLING_PERROR = "Prints an error message to stderr."
    TOKEN_C_ERROR_HANDLING_RAISE = "Initiates a signal."
    TOKEN_C_ERROR_HANDLING_SIGNAL = "Allows handling of an interrupt signal from the operating system."
    TOKEN_C_ERROR_HANDLING_STRERROR = "Retrieves pointer to system error message."
    TOKEN_C_SEARCHING_BSEARCH = "Performs a binary search of a sorted array."
    TOKEN_C_SEARCHING_QSORT = "Performs a quick sort on an array of elements."
    TOKEN_C_MATHS_ABS = "Calculates the absolute value of an integer."
    TOKEN_C_MATHS_CEIL = "Calculates the double value representing the small..."
    TOKEN_C_MATHS_DIV = "Calculates the quotient and remainder of an integer."
    TOKEN_C_MATHS_ERF = "Calculates the error function."
    TOKEN_C_MATHS_ERFC = "Calculates the error function for large"
    TOKEN_C_MATHS_EXP = "Calculates an exponential function."
    TOKEN_C_MATHS_FABS = "Calculates the absolute value of a"
    TOKEN_C_MATHS_FLOOR = "Calculates the double value representing"
    TOKEN_C_MATHS_FMOD = "Calculates the floating-point remainder of"
    TOKEN_C_MATHS_FREXP = "Separates a floating-point number into its"
    TOKEN_C_MATHS_GAMMA = "Calculates the gamma function."
    TOKEN_C_MATHS_HYPOT = "Calculates the hypotenuse."
    TOKEN_C_MATHS_LABS = "Calculates the absolute value of a long"
    TOKEN_C_MATHS_LLABS = "Calculates the absolute value of a long"
    TOKEN_C_MATHS_LDEXP = "Multiplies a floating-point number by an"
    TOKEN_C_MATHS_LDIV = "Calculates the quotient and remainder of"
    TOKEN_C_MATHS_LLDIV = "Calculates the quotient and remainder of"
    TOKEN_C_MATHS_LOG = "Calculates natural logarithm."
    TOKEN_C_MATHS_LOG10 = "Calculates base 10 logarithm."
    TOKEN_C_MATHS_MODF = "Calculates the signed fractional portion of"
    TOKEN_C_MATHS_NEXTAFTER = "Calculates the next representable"
    TOKEN_C_MATHS_NEXTAFTERL = "Calculates the next representable"
    TOKEN_C_MATHS_NEXTTOWARD = "Calculates the next representable"
    TOKEN_C_MATHS_NEXTTOWARDL = "Calculates the next representable"
    TOKEN_C_MATHS_POW = "Calculates the value of an argument"
    TOKEN_C_MATHS_QUANTEXPD32 = "Compute the quantum exponent of a"
    TOKEN_C_MATHS_QUANTEXPD64 = "Compute the quantum exponent of a"
    TOKEN_C_MATHS_QUANTEXPD128 = "Compute the quantum exponent of"
    TOKEN_C_MATHS_QUANTIZED32 = "Set the quantum exponent of a single-"
    TOKEN_C_MATHS_QUANTIZED64 = "Set the quantum exponent of a double-"
    TOKEN_C_MATHS_QUANTIZED128 = "Set the quantum exponent of a quad-"
    TOKEN_C_MATHS_SAMEQUANTUMD32 = "Determine if the quantum exponents"
    TOKEN_C_MATHS_SAMEQUANTUMD64 = "Determine if the quantum exponents"
    TOKEN_C_MATHS_SAMEQUANTUMD128 = "Determine if the quantum exponents"
    TOKEN_C_MATHS_SQRT = "Calculates the square root of a number."
    TOKEN_C_MATHS_ACOS = "Calculates the arc cosine."
    TOKEN_C_MATHS_ASIN = "Calculates the arc sine."
    TOKEN_C_MATHS_ATAN = "Calculates the arc tangent."
    TOKEN_C_MATHS_ATAN2 = "Calculates the arc tangent."
    TOKEN_C_MATHS_COS = "Calculates the cosine."
    TOKEN_C_MATHS_COSH = "Calculates the hyperbolic cosine."
    TOKEN_C_MATHS_SIN = "Calculates the sine."
    TOKEN_C_MATHS_SINH = "Calculates the hyperbolic sine."
    TOKEN_C_MATHS_TAN = "Calculates the tangent."
    TOKEN_C_MATHS_TANH = "Calculates the hyperbolic tangent."
    TOKEN_C_MATHS_J0 = "0 order differential equation of the first"
    TOKEN_C_MATHS_J1 = "1st order differential equation of the first"
    TOKEN_C_MATHS_JN = "nth order differential equation of the first"
    TOKEN_C_MATHS_Y0 = "0 order differential equation of the"
    TOKEN_C_MATHS_Y1 = "1st order differential equation of the"
    TOKEN_C_MATHS_YN = "nth order differential equation of the"
    TOKEN_C_TIME_ASCTIME = "Converts time stored as a structure to a"
    TOKEN_C_TIME_ASCTIME_R = "Converts time stored as a structure to a"
    TOKEN_C_TIME_CLOCK = "Determines processor time."
    TOKEN_C_TIME_CTIME = "Converts time stored as a long value to a"
    TOKEN_C_TIME_CTIME64 = "Converts time stored as a long long value"
    TOKEN_C_TIME_CTIME_R = "Converts time stored as a long value to"
    TOKEN_C_TIME_CTIME64_R = "Converts time stored as a long long value"
    TOKEN_C_TIME_DIFFTIME = "Calculates the difference between two"
    TOKEN_C_TIME_DIFFTIME64 = "Calculates the difference between two"
    TOKEN_C_TIME_GMTIME = "Converts time to Coordinated Universal"
    TOKEN_C_TIME_GMTIME_R = "Converts time to Coordinated Universal"
    TOKEN_C_TIME_GMTIME64 = "Converts time to Coordinated Universal"
    TOKEN_C_TIME_GMTIME64_R = "Converts time to Coordinated Universal"
    TOKEN_C_TIME_LOCALTIME = "Converts time to local time."
    TOKEN_C_TIME_LOCALTIME64 = "Converts time to local time."
    TOKEN_C_TIME_LOCALTIME_R = "Converts time to local time. (Restartable"
    TOKEN_C_TIME_LOCALTIME64_R = "Converts time to local time. (Restartable"
    TOKEN_C_TIME_MKTIME = "Converts local time into calendar time."
    TOKEN_C_TIME_MKTIME64 = "Converts local time into calendar time."
    TOKEN_C_TIME_TIME = "Returns the time in seconds."
    TOKEN_C_TIME_TIME64 = "Returns the time in seconds."
    TOKEN_C_TYPE_CONVERSION_ATOF = "Converts a character string to a floating-"
    TOKEN_C_TYPE_CONVERSION_ATOI = "Converts a character string to an integer."
    TOKEN_C_TYPE_CONVERSION_ATOL = "Converts a character string to a long"
    TOKEN_C_TYPE_CONVERSION_ATOLL = "Converts a character string to a long"
    TOKEN_C_TYPE_CONVERSION_GCVT = "Converts a floating-point value to a string."
    TOKEN_C_TYPE_CONVERSION_ITOA = "Converts an integer to a string."
    TOKEN_C_TYPE_CONVERSION_LTOA = "Converts a long integer to a string."
    TOKEN_C_TYPE_CONVERSION_STRTOD = "Converts a character string to a double-"
    TOKEN_C_TYPE_CONVERSION_STRTOD32 = "Converts a character string to a single-"
    TOKEN_C_TYPE_CONVERSION_STRTOD64 = "Converts a character string to a double-"
    TOKEN_C_TYPE_CONVERSION_STRTOD128 = "Converts a character string to a quad-"
    TOKEN_C_TYPE_CONVERSION_STRTOF = "Converts a character string to a binary"
    TOKEN_C_TYPE_CONVERSION_STRTOL = "Converts a character string to a long"
    TOKEN_C_TYPE_CONVERSION_STRTOLD = "Converts a character string to a double-"
    TOKEN_C_TYPE_CONVERSION_STRTOLL = "Converts a character string to a long long"
    TOKEN_C_TYPE_CONVERSION_STRTOUL = "Converts a string to an unsigned long"
    TOKEN_C_TYPE_CONVERSION_STRTOULL = "Converts a string to an unsigned long long"
    TOKEN_C_TYPE_CONVERSION_TOASCII = "Converts a character to the corresponding"
    TOKEN_C_TYPE_CONVERSION_ULTOA = "Converts an unsigned long integer to a"
    TOKEN_C_TYPE_CONVERSION_WCSTOD = "Converts a wide-character string to"
    TOKEN_C_TYPE_CONVERSION_WCSTOD32 = "Converts a wide-character string to a"
    TOKEN_C_TYPE_CONVERSION_WCSTOD64 = "Converts a wide-character string to a"
    TOKEN_C_TYPE_CONVERSION_WCSTOD128 = "Converts a wide-character string to"
    TOKEN_C_TYPE_CONVERSION_WCSTOF = "Converts a wide-character string to a"
    TOKEN_C_TYPE_CONVERSION_WCSTOL = "Converts a wide-character string to a long"
    TOKEN_C_TYPE_CONVERSION_WCSTOLD = "Converts a wide-character string to"
    TOKEN_C_TYPE_CONVERSION_WCSTOLL = "Converts a wide-character string to a long"
    TOKEN_C_TYPE_CONVERSION_WCSTOUL = "Converts a wide-character string to an"
    TOKEN_C_TYPE_CONVERSION_WCSTOULL = "Converts a wide-character string to an"
    TOKEN_IBM_CONVERSION_QXXDTOP = "Converts a floating-point value to a"
    TOKEN_IBM_CONVERSION_QXXDTOZ = "Converts a floating-point value to a zoned"
    TOKEN_IBM_CONVERSION_QXXITOP = "Converts an integer value to a packed"
    TOKEN_IBM_CONVERSION_QXXITOZ = "Converts an integer value to a zoned"
    TOKEN_IBM_CONVERSION_QXXPTOD = "Converts a packed decimal value to a"
    TOKEN_IBM_CONVERSION_QXXPTOI = "Converts a packed decimal value to an"
    TOKEN_IBM_CONVERSION_QXXZTOD = "Converts a zoned decimal value to a"
    TOKEN_IBM_CONVERSION_QXXZTOI = "Converts a zoned decimal value to an"
    TOKEN_IBM_RACQUIRE = "Prepares a device for record I/O"
    TOKEN_IBM_RECORD_IO_RCLOSE = "Closes a file that is opened for record I/O"
    TOKEN_IBM_RECORD_IO_RCOMMIT = "Completes the current transaction, and"
    TOKEN_IBM_RECORD_IO_RDELETE = "Deletes the currently locked record."
    TOKEN_IBM_RECORD_IO_RDEVATR = "Returns a pointer to a copy of the"
    TOKEN_IBM_RECORD_IO_RFEOD = "Forces an end-of-file condition for the file"
    TOKEN_IBM_RECORD_IO_RFEOV = "Forces an end-of-volume condition for"
    TOKEN_IBM_RECORD_IO_RFORMAT = "Sets the record format to fmt for the file"
    TOKEN_IBM_RECORD_IO_RINDARA = "Sets up the separate indicator area"
    TOKEN_IBM_RECORD_IO_RIOFBK = "Returns a pointer to a copy of the I/O"
    TOKEN_IBM_RECORD_IO_RLOCATE = "Positions to the record in the files"
    TOKEN_IBM_RECORD_IO_ROPEN = "Opens a file for record I/O operations."
    TOKEN_IBM_RECORD_IO_ROPNFBK = "Returns a pointer to a copy of the open"
    TOKEN_IBM_RECORD_IO_RPGMDEV = "Sets the default program device."
    TOKEN_IBM_RECORD_IO_RREADD = "Reads a record by relative record number."
    TOKEN_IBM_RECORD_IO_RREADF = "Reads the first record."
    TOKEN_IBM_RECORD_IO_RREADINDV = "Reads data from an invited device."
    TOKEN_IBM_RECORD_IO_RREADK = "Reads a record by key."
    TOKEN_IBM_RECORD_IO_RREADL = "Reads the last record."
    TOKEN_IBM_RECORD_IO_RREADN = "Reads the next record."
    TOKEN_IBM_RECORD_IO_RREADNC = "Reads the next changed record in the"
    TOKEN_IBM_RECORD_IO_RREADP = "Reads the previous record."
    TOKEN_IBM_RECORD_IO_RREADS = "Reads the same record."
    TOKEN_IBM_RECORD_IO_RRELEASE = "Makes the specified device ineligible for"
    TOKEN_IBM_RECORD_IO_RRLSLCK = "Releases the currently locked record."
    TOKEN_IBM_RECORD_IO_RROLLBCK = "Reestablishes the last commitment"
    TOKEN_IBM_RECORD_IO_RUPDATE = "Writes to the record that is currently"
    TOKEN_IBM_RECORD_IO_RUPFB = "Updates the feedback structure with"
    TOKEN_IBM_RECORD_IO_RWRITE = "Writes a record to the end of the file."
    TOKEN_IBM_RECORD_IO_RWRITED = "Writes a record by relative record number."
    TOKEN_IBM_RECORD_IO_RWRITERD = "Writes and reads a record."
    TOKEN_IBM_RECORD_IO_RWRREAD = "Functions as _Rwriterd(), except"
    TOKEN_C_STREAM_IO_FPRINTF = "Formats and prints characters to the"
    TOKEN_C_STREAM_IO_FSCANF = "Reads data from a stream into locations"
    TOKEN_C_STREAM_IO_FWPRINTF = "Formats data as wide characters, and"
    TOKEN_C_STREAM_IO_FWSCANF = "Reads wide data from stream into"
    TOKEN_C_STREAM_IO_PRINTF = "Formats and prints characters to stdout."
    TOKEN_C_STREAM_IO_SCANF = "Reads data from stdin into locations"
    TOKEN_C_STREAM_IO_SNPRINTF = "Same as sprintf, except that the"
    TOKEN_C_STREAM_IO_SPRINTF = "Formats and writes characters to a buffer."
    TOKEN_C_STREAM_IO_SSCANF = "Reads data from a buffer into locations"
    TOKEN_C_STREAM_IO_SWPRINTF = "Formats and writes wide characters to"
    TOKEN_C_STREAM_IO_SWSCANF = "Reads wide data from a buffer into"
    TOKEN_C_STREAM_IO_VFPRINTF = "Formats and prints characters to the"
    TOKEN_C_STREAM_IO_VFSCANF = "Reads data from a specified stream into"
    TOKEN_C_STREAM_IO_VFWPRINTF = "Formats argument data as wide"
    TOKEN_C_STREAM_IO_VFWSCANF = "Reads wide data from a specified stream"
    TOKEN_C_STREAM_IO_VPRINTF = "Formats and writes characters to stdout"
    TOKEN_C_STREAM_IO_VSCANF = "Reads data from stdin into locations"
    TOKEN_C_STREAM_IO_VSNPRINTF = "Same as vsprintf, except that the"
    TOKEN_C_STREAM_IO_VSPRINTF = "Formats and writes characters to a buffer"
    TOKEN_C_STREAM_IO_VSSCANF = "Reads data from a buffer into locations"
    TOKEN_C_STREAM_IO_VSWPRINTF = "Formats and writes wide characters"
    TOKEN_C_STREAM_IO_VSWSCANF = "Reads wide data from a buffer into"
    TOKEN_C_STREAM_IO_VWPRINTF = "Formats and writes wide characters to"
    TOKEN_C_STREAM_IO_VWSCANF = "Reads wide data from stdin into"
    TOKEN_C_STREAM_IO_WPRINTF = "Formats and writes wide characters to"
    TOKEN_C_STREAM_IO_WSCANF = "Reads wide data from stdin into"
    TOKEN_C_CHAR_IO_FGETC = "Reads a character from a specified input"
    TOKEN_C_CHAR_IO_FGETS = "Reads a string from a specified input"
    TOKEN_C_CHAR_IO_FGETWC = "Reads a wide character from a specified"
    TOKEN_C_CHAR_IO_FGETWS = "Reads a wide-character string from a"
    TOKEN_C_CHAR_IO_FPUTC = "Prints a character to a specified output"
    TOKEN_C_CHAR_IO__FPUTCHAR = "Writes a character to stdout."
    TOKEN_C_CHAR_IO_FPUTS = "Prints a string to a specified output"
    TOKEN_C_CHAR_IO_FPUTWC = "Writes a wide character to a specified"
    TOKEN_C_CHAR_IO_FPUTWS = "Writes a wide-character string to a"
    TOKEN_C_CHAR_IO_GETC = "Reads a character from a specified input"
    TOKEN_C_CHAR_IO_GETCHAR = "Reads a character from stdin."
    TOKEN_C_CHAR_IO_GETS = "Reads a line from stdin."
    TOKEN_C_CHAR_IO_GETWC = "Reads a wide character from a specified"
    TOKEN_C_CHAR_IO_GETWCHAR = "Gets a wide character from stdin."
    TOKEN_C_CHAR_IO_PUTC = "Prints a character to a specified output"
    TOKEN_C_CHAR_IO_PUTCHAR = "Prints a character to stdout."
    TOKEN_C_CHAR_IO_PUTS = "Prints a string to stdout."
    TOKEN_C_CHAR_IO_PUTWC = "Writes a wide character to a specified"
    TOKEN_C_CHAR_IO_PUTWCHAR = "Writes a wide character to stdout."
    TOKEN_C_CHAR_IO_UNGETC = "Pushes a character back onto a specified"
    TOKEN_C_CHAR_IO_UNGETWC = "Pushes a wide character back onto a"
    TOKEN_C_DIRECT_IO_FREAD = "Reads items from a specified input"
    TOKEN_C_DIRECT_IO_FWRITE = "Writes items to a specified output stream."
    TOKEN_C_DIRECT_IO_FGETPOS = "Gets the current position of the file"
    TOKEN_C_DIRECT_IO_FSEEK = "Moves the file pointer to a new location."
    TOKEN_C_DIRECT_IO_FSEEKO = "Same as fseek()."
    TOKEN_C_DIRECT_IO_FSETPOS = "Moves the file pointer to a new location."
    TOKEN_C_DIRECT_IO_FTELL = "Gets the current position of the file"
    TOKEN_C_DIRECT_IO_FTELLO = "Same as ftell()."
    TOKEN_C_DIRECT_IO_REWIND = "Repositions the file pointer to the"
    TOKEN_C_FILE_ACCESS_FCLOSE = "Closes a specified stream."
    TOKEN_C_FILE_ACCESS_FDOPEN = "Associates an input or output stream with"
    TOKEN_C_FILE_ACCESS_FFLUSH = "Causes the system to write the contents"
    TOKEN_C_FILE_ACCESS_FOPEN = "Opens a specified stream."
    TOKEN_C_FILE_ACCESS_FREOPEN = "Closes a file and reassigns a stream."
    TOKEN_C_FILE_ACCESS_FWIDE = "Determines stream orientation."
    TOKEN_C_FILE_ACCESS_SETBUF = "Allows control of buffering."
    TOKEN_C_FILE_ACCESS_SETVBUF = "Controls buffering and buffer size for a"
    TOKEN_C_FILE_ACCESS_WFOPEN = "Opens a specified stream, accepting file"
    TOKEN_C_FILE_OPERATION_FILENO = "Determines the file handle."
    TOKEN_C_FILE_OPERATION_REMOVE = "Deletes a specified file."
    TOKEN_C_FILE_OPERATION_RENAME = "Renames a specified file."
    TOKEN_C_FILE_OPERATION_TMPFILE = "Creates a temporary file and returns a"
    TOKEN_C_FILE_OPERATION_TMPNAM = "Produces a temporary file name."
    TOKEN_C_HANDLING_ARGLIST_VA_ARG = "Allows access to variable number of function arguments."
    TOKEN_C_HANDLING_ARGLIST_VA_COPY = "Allows access to variable number of function arguments."
    TOKEN_C_HANDLING_ARGLIST_VA_END = "Allows access to variable number of function arguments."
    TOKEN_C_HANDLING_ARGLIST_VA_START = "Allows access to variable number of function arguments."
    TOKEN_C_RANDOM_RAND = "Pseudorandom integer generator."
    TOKEN_C_RANDOM_RAND_R = "Rrestartable pseudorandom integer generator"
    TOKEN_C_RANDOM_SRAND = "Sets the starting point for pseudorandom numbers."
    TOKEN_C_MEMORY_ALLOCATION_CALLOC = "Reserves storage space for an array and initializes the values of all elements to 0."
    TOKEN_C_MEMORY_ALLOCATION_C_QUICKPOOL_DEBUG = "Modifies Quick Pool memory manager characteristics."
    TOKEN_C_MEMORY_ALLOCATION_C_QUICKPOOL_INIT = "Initializes the use of the Quick Pool memory manager algorithm."
    TOKEN_C_MEMORY_ALLOCATION_C_QUICKPOOL_REPORT = "Generates a spooled file that contains a snapshot ..."
    TOKEN_C_MEMORY_ALLOCATION_C_TS_MALLOC_DEBUG = "Returns the same information as _C_TS_malloc_info,..."
    TOKEN_C_MEMORY_ALLOCATION_C_TS_MALLOC_INFO = "Returns the current memory usage information."
    TOKEN_C_MEMORY_ALLOCATION_FREE = "Frees storage blocks."
    TOKEN_C_MEMORY_ALLOCATION_MALLOC = "Reserves storage blocks."
    TOKEN_C_MEMORY_ALLOCATION_REALLOC = "Changes storage size allocated for an object."
    TOKEN_C_MEMORY_OBJECT_MEMCHR = "Searches a buffer for the first occurrence"
    TOKEN_C_MEMORY_OBJECT_MEMCMP = "Compares two buffers."
    TOKEN_C_MEMORY_OBJECT_MEMCPY = "Copies a buffer."
    TOKEN_C_MEMORY_OBJECT_MEMICMP = "Compare two buffers without regard to"
    TOKEN_C_MEMORY_OBJECT_MEMMOVE = "Moves a buffer."
    TOKEN_C_MEMORY_OBJECT_MEMSET = "Sets a buffer to a given value."
    TOKEN_C_MEMORY_OBJECT_WMEMCHR = "Locates a wide character in a wide-"
    TOKEN_C_MEMORY_OBJECT_WMEMCMP = "Compares two wide-character buffers."
    TOKEN_C_MEMORY_OBJECT_WMEMCPY = "Copies a wide-character buffer."
    TOKEN_C_MEMORY_OBJECT_WMEMMOVE = "Moves a wide-character buffer."
    TOKEN_C_MEMORY_OBJECT_WMEMSET = "Sets a wide-character buffer to a given"
    TOKEN_C_ENV_INTERACTION_ABORT = "Ends a program abnormally."
    TOKEN_C_ENV_INTERACTION_C_GET_SSN_HANDLE = "Returns a handle to the C session for use with DSM APIs."
    TOKEN_C_ENV_INTERACTION_EXIT = "Ends the program normally if called in the initial thread."
    TOKEN_C_ENV_INTERACTION_GETENV = "Searches environment variables for a specified variable."
    TOKEN_C_ENV_INTERACTION_LOCALECONV = "Formats numeric quantities in struct lconv according to the current locale."
    TOKEN_C_ENV_INTERACTION_LONGJMP = "Restores a stack environment."
    TOKEN_C_ENV_INTERACTION_NL_LANGINFO = "Retrieves information from the current locale."
    TOKEN_C_ENV_INTERACTION_PUTENV = "Sets the value of an environment variable by altering an existing variable or creating a new one."
    TOKEN_C_ENV_INTERACTION_SETJMP = "Saves a stack environment."
    TOKEN_C_ENV_INTERACTION_SETLOCALE = "Changes or queries locale."
    TOKEN_C_ENV_INTERACTION_SYSTEM = "Passes a string to the operating system's command interpreter."
    TOKEN_C_ENV_INTERACTION_WCSLOCALECONV = "Formats numeric quantities in struct wcslconv according to the current locale."
    TOKEN_C_STRING_STRCASECMP = "Compares strings without case sensitivity."
    TOKEN_C_STRING_STRCAT = "Concatenates two strings."
    TOKEN_C_STRING_STRCHR = "Locates the first occurrence of a specified"
    TOKEN_C_STRING_STRCMP = "Compares the value of two strings."
    TOKEN_C_STRING_STRCMPI = "Compares the value of two strings without"
    TOKEN_C_STRING_STRCOLL = "Compares the locale-defined value of two"
    TOKEN_C_STRING_STRCPY = "Copies one string into another."
    TOKEN_C_STRING_STRCSPN = "Finds the length of the first substring in a"
    TOKEN_C_STRING_STRDUP = "Duplicates a string."
    TOKEN_C_STRING_STRFMON = "Converts monetary value to string."
    TOKEN_C_STRING_STRFTIME = "Converts date and time to a formatted"
    TOKEN_C_STRING_STRICMP = "Compares the value of two strings without"
    TOKEN_C_STRING_STRLEN = "Calculates the length of a string."
    TOKEN_C_STRING_STRNCASECMP = "Compares strings without case sensitivity."
    TOKEN_C_STRING_STRNCAT = "Adds a specified length of one string to"
    TOKEN_C_STRING_STRNCMP = "Compares two strings up to a specified"
    TOKEN_C_STRING_STRNCPY = "Copies a specified length of one string into"
    TOKEN_C_STRING_STRNICMP = "Compares the value of two substrings"
    TOKEN_C_STRING_STRNSET = "Sets character in a string."
    TOKEN_C_STRING_STRPBRK = "Locates specified characters in a string."
    TOKEN_C_STRING_STRPTIME = "Converts string to formatted time."
    TOKEN_C_STRING_STRRCHR = "Locates the last occurrence of a character"
    TOKEN_C_STRING_STRSPN = "Locates the first character in a string that"
    TOKEN_C_STRING_STRSTR = "Locates the first occurrence of a string in"
    TOKEN_C_STRING_STRTOK = "Locates a specified token in a string."
    TOKEN_C_STRING_STRTOK_R = "Locates a specified token in a string."
    TOKEN_C_STRING_STRXFRM = "Transforms strings according to locale."
    TOKEN_C_STRING_WCSFTIME = "Converts to formatted date and time."
    TOKEN_C_STRING_WCSPTIME = "Converts string to formatted time."
    TOKEN_C_STRING_WCSSTR = "Locates a wide-character substring."
    TOKEN_C_STRING_WCSTOK = "Tokenizes a wide-character string."
    TOKEN_C_CHAR_TEST_ISALNUM = "Tests for alphanumeric characters."
    TOKEN_C_CHAR_TEST_ISALPHA = "Tests for alphabetic characters."
    TOKEN_C_CHAR_TEST_ISASCII = "Tests for ASCII values."
    TOKEN_C_CHAR_TEST_ISBLANK = "Tests for blank or tab characters."
    TOKEN_C_CHAR_TEST_ISCNTRL = "Tests for control characters."
    TOKEN_C_CHAR_TEST_ISDIGIT = "Tests for decimal digits."
    TOKEN_C_CHAR_TEST_ISGRAPH = "Tests for printable characters excluding"
    TOKEN_C_CHAR_TEST_ISLOWER = "Tests for lowercase letters."
    TOKEN_C_CHAR_TEST_ISPRINT = "Tests for printable characters including"
    TOKEN_C_CHAR_TEST_ISPUNCT = "Tests for punctuation characters as"
    TOKEN_C_CHAR_TEST_ISSPACE = "Tests for white-space characters."
    TOKEN_C_CHAR_TEST_ISUPPER = "Tests for uppercase letters."
    TOKEN_C_CHAR_TEST_ISXDIGIT = "Tests for wide hexadecimal digits 0"
    TOKEN_C_MULTIBYTE_TEST_ISWALNUM = "Tests for wide alphanumeric characters."
    TOKEN_C_MULTIBYTE_TEST_ISWALPHA = "Tests for wide alphabetic characters."
    TOKEN_C_MULTIBYTE_TEST_ISWBLANK = "Tests for wide blank or tab characters."
    TOKEN_C_MULTIBYTE_TEST_ISWCNTRL = "Tests for wide control characters."
    TOKEN_C_MULTIBYTE_TEST_ISWCTYPE = "Tests for character property."
    TOKEN_C_MULTIBYTE_TEST_ISWDIGIT = "Tests for wide decimal digits."
    TOKEN_C_MULTIBYTE_TEST_ISWGRAPH = "Tests for wide printing characters"
    TOKEN_C_MULTIBYTE_TEST_ISWLOWER = "Tests for wide lowercase letters."
    TOKEN_C_MULTIBYTE_TEST_ISWPRINT = "Tests for wide printing characters."
    TOKEN_C_MULTIBYTE_TEST_ISWPUNCT = "Tests for wide punctuation characters as"
    TOKEN_C_MULTIBYTE_TEST_ISWSPACE = "Tests for wide whitespace characters."
    TOKEN_C_MULTIBYTE_TEST_ISWUPPER = "Tests for wide uppercase letters."
    TOKEN_C_MULTIBYTE_TEST_ISWXDIGIT = "Tests for wide hexadecimal digits 0"
    TOKEN_C_CHARCASE_MAPPING_TOLOWER = "Converts a character to lowercase."
    TOKEN_C_CHARCASE_MAPPING_TOUPPER = "Converts a character to uppercase."
    TOKEN_C_CHARCASE_MAPPING_TOWLOWER = "Converts a wide character to lowercase."
    TOKEN_C_CHARCASE_MAPPING_TOWUPPER = "Converts a wide character to uppercase."
    TOKEN_C_MULTIBYTE_MANIPULATION_BTOWC = "Converts a single byte to a wide character."
    TOKEN_C_MULTIBYTE_MANIPULATION_MBLEN = "Determines the length of a multibyte"
    TOKEN_C_MULTIBYTE_MANIPULATION_MBRLEN = "Determines the length of a multibyte"
    TOKEN_C_MULTIBYTE_MANIPULATION_MBRTOWC = "Converts a multibyte character to a"
    TOKEN_C_MULTIBYTE_MANIPULATION_MBSINIT = "Tests state object for initial state."
    TOKEN_C_MULTIBYTE_MANIPULATION_MBSRTOWCS = "Converts a multibyte string to a wide"
    TOKEN_C_MULTIBYTE_MANIPULATION_MBSTOWCS = "Converts a multibyte string to a wide"
    TOKEN_C_MULTIBYTE_MANIPULATION_MBTOWC = "Converts multibyte characters to a wide"
    TOKEN_C_MULTIBYTE_MANIPULATION_TOWCTRANS = "Translates wide character."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCRTOMB = "Converts a wide character to a"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSCAT = "Concatenates wide character strings."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSCHR = "Searches a wide character string for a"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSCMP = "Compares two wide character strings."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSCOLL = "Compares the locale-defined value of two"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSCPY = "Copies a wide character string."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSCSPN = "Searches a wide character string for"
    TOKEN_C_MULTIBYTE_MANIPULATION___WCSICMP = "Compares two wide character strings"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSLEN = "Finds length of a wide character string."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSNCAT = "Concatenates a wide character string"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSNCMP = "Compares wide character string"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSNCPY = "Copies wide character string segments."
    TOKEN_C_MULTIBYTE_MANIPULATION___WCSNICMP = "Compares two wide character substrings"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSPBRK = "Locates wide characters in string."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSRCHR = "Locates wide character in string."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSRTOMBS = "Converts a wide character string to a"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSSPN = "Finds offset of first nonmatching wide"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSTOMBS = "Converts a wide character string to a"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSWCS = "Locates a wide character string in another"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSWIDTH = "Determines the display width of a wide"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCSXFRM = "Transforms wide-character strings"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCTOB = "Converts a wide character to a single byte."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCTOMB = "Converts a wide character to multibyte"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCTRANS = "Gets a handle for character mapping."
    TOKEN_C_MULTIBYTE_MANIPULATION_WCTYPE = "Obtains a handle for character property"
    TOKEN_C_MULTIBYTE_MANIPULATION_WCWIDTH = "Determines the display width of a wide"
    TOKEN_IBM_DATA_AREA_QXXCHGDA = "Changes the data area."
    TOKEN_IBM_DATA_AREA_QXXRTVDA = "Retrieves a copy of the data area"
    TOKEN_IBM_CATALOG_CATCLOSE = "Closes a message catalog."
    TOKEN_IBM_CATALOG_CATGETS = "Reads a message from an opened"
    TOKEN_IBM_REGEX_REGCOMP = "Compiles a regular expression."
    TOKEN_IBM_REGEX_REGERROR = "Returns error message for regular expression."
    TOKEN_IBM_REGEX_REGEXEC = "Executes a compiled regular expression."
    TOKEN_IBM_REGEX_REGFREE = "Frees memory for regular expression."
    




    TOKEN_UNSUPPORTED = "invalid token"